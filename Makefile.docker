# Makefile pour les op√©rations Docker de Cerberus-SAST
# Usage: make -f Makefile.docker <target>

# Configuration
IMAGE_NAME = cerberus-sast
VERSION = latest
REGISTRY = ghcr.io/barbidoux
OUTPUT_DIR = $(PWD)/output

.PHONY: help build run demo test clean push pull dev docs

# Aide par d√©faut
help:
	@echo "üõ°Ô∏è  Cerberus-SAST Docker Makefile"
	@echo ""
	@echo "Commandes disponibles:"
	@echo "  build          - Build l'image Docker"
	@echo "  run            - Lance un scan sur le r√©pertoire courant"
	@echo "  demo           - Ex√©cute la d√©monstration compl√®te"
	@echo "  test           - Lance les tests dans le conteneur"
	@echo "  dev            - Mode d√©veloppement interactif"
	@echo "  docs           - G√©n√®re la documentation"
	@echo "  clean          - Nettoie les images et conteneurs"
	@echo "  push           - Publie l'image sur le registry"
	@echo "  pull           - T√©l√©charge l'image depuis le registry"
	@echo ""
	@echo "Variables:"
	@echo "  IMAGE_NAME     = $(IMAGE_NAME)"
	@echo "  VERSION        = $(VERSION)"
	@echo "  REGISTRY       = $(REGISTRY)"
	@echo "  OUTPUT_DIR     = $(OUTPUT_DIR)"

# Build de l'image Docker
build:
	@echo "üî® Build de l'image Docker..."
	docker build -t $(IMAGE_NAME):$(VERSION) .
	@echo "‚úÖ Image $(IMAGE_NAME):$(VERSION) cr√©√©e"

# Build multi-platform
build-multiplatform:
	@echo "üî® Build multi-platform..."
	docker buildx build --platform linux/amd64,linux/arm64 -t $(IMAGE_NAME):$(VERSION) .

# Scan du r√©pertoire courant
run: build
	@echo "üîç Scan du r√©pertoire courant..."
	@mkdir -p $(OUTPUT_DIR)
	docker run --rm \
		-v $(PWD):/workspace:ro \
		-v $(OUTPUT_DIR):/output \
		$(IMAGE_NAME):$(VERSION) scan /workspace --format json --output /output/results.json
	@echo "‚úÖ Scan termin√©, r√©sultats dans $(OUTPUT_DIR)/"

# D√©monstration compl√®te
demo: build
	@echo "üé≠ Lancement de la d√©monstration..."
	@mkdir -p $(OUTPUT_DIR)
	docker run --rm \
		-v $(OUTPUT_DIR):/output \
		$(IMAGE_NAME):$(VERSION) /usr/local/bin/run-example.sh
	@echo "‚úÖ D√©monstration termin√©e, fichiers dans $(OUTPUT_DIR)/"

# Tests
test: build
	@echo "üß™ Ex√©cution des tests..."
	docker run --rm \
		-v $(PWD):/app:ro \
		$(IMAGE_NAME):$(VERSION) python -m pytest tests/ -v

# Mode d√©veloppement interactif
dev: build
	@echo "üíª Mode d√©veloppement interactif..."
	@mkdir -p $(OUTPUT_DIR)
	docker run -it --rm \
		-v $(PWD):/app:rw \
		-v $(OUTPUT_DIR):/output \
		--entrypoint bash \
		$(IMAGE_NAME):$(VERSION)

# G√©n√©ration de documentation
docs: build
	@echo "üìö G√©n√©ration de la documentation..."
	@mkdir -p $(OUTPUT_DIR)/docs
	docker run --rm \
		-v $(OUTPUT_DIR)/docs:/output \
		$(IMAGE_NAME):$(VERSION) rules > $(OUTPUT_DIR)/docs/rules.txt
	docker run --rm \
		-v $(OUTPUT_DIR)/docs:/output \
		$(IMAGE_NAME):$(VERSION) doctor > $(OUTPUT_DIR)/docs/system-info.txt
	@echo "‚úÖ Documentation g√©n√©r√©e dans $(OUTPUT_DIR)/docs/"

# Commandes sp√©cifiques
rules: build
	@echo "üìã Liste des r√®gles disponibles..."
	docker run --rm $(IMAGE_NAME):$(VERSION) rules

doctor: build
	@echo "ü©∫ Diagnostic du syst√®me..."
	docker run --rm $(IMAGE_NAME):$(VERSION) doctor

baseline: build
	@echo "üìä Cr√©ation d'une baseline..."
	@mkdir -p $(OUTPUT_DIR)
	docker run --rm \
		-v $(PWD):/workspace:ro \
		-v $(OUTPUT_DIR):/output \
		$(IMAGE_NAME):$(VERSION) baseline /workspace --output /output/baseline.json

# Scan avec formats multiples
scan-all: build
	@echo "üîç Scan avec tous les formats..."
	@mkdir -p $(OUTPUT_DIR)
	docker run --rm \
		-v $(PWD):/workspace:ro \
		-v $(OUTPUT_DIR):/output \
		$(IMAGE_NAME):$(VERSION) scan /workspace --format json --output /output/results.json
	docker run --rm \
		-v $(PWD):/workspace:ro \
		-v $(OUTPUT_DIR):/output \
		$(IMAGE_NAME):$(VERSION) scan /workspace --format sarif --output /output/results.sarif
	docker run --rm \
		-v $(PWD):/workspace:ro \
		-v $(OUTPUT_DIR):/output \
		$(IMAGE_NAME):$(VERSION) scan /workspace --format html --output /output/results.html
	@echo "‚úÖ Scans termin√©s dans tous les formats"

# Publication sur registry
push: build
	@echo "üì§ Publication sur $(REGISTRY)..."
	docker tag $(IMAGE_NAME):$(VERSION) $(REGISTRY)/$(IMAGE_NAME):$(VERSION)
	docker push $(REGISTRY)/$(IMAGE_NAME):$(VERSION)
	@echo "‚úÖ Image publi√©e: $(REGISTRY)/$(IMAGE_NAME):$(VERSION)"

# T√©l√©chargement depuis registry
pull:
	@echo "üì• T√©l√©chargement depuis $(REGISTRY)..."
	docker pull $(REGISTRY)/$(IMAGE_NAME):$(VERSION)
	docker tag $(REGISTRY)/$(IMAGE_NAME):$(VERSION) $(IMAGE_NAME):$(VERSION)

# Nettoyage
clean:
	@echo "üßπ Nettoyage des conteneurs et images..."
	-docker container prune -f
	-docker image rm $(IMAGE_NAME):$(VERSION) 2>/dev/null || true
	-docker image rm $(REGISTRY)/$(IMAGE_NAME):$(VERSION) 2>/dev/null || true
	-docker system prune -f
	@echo "‚úÖ Nettoyage termin√©"

# Nettoyage complet
clean-all: clean
	@echo "üßπ Nettoyage complet..."
	-docker image prune -a -f
	-docker volume prune -f
	-rm -rf $(OUTPUT_DIR)
	@echo "‚úÖ Nettoyage complet termin√©"

# Informations sur l'image
info: build
	@echo "‚ÑπÔ∏è  Informations sur l'image:"
	@docker images $(IMAGE_NAME):$(VERSION)
	@echo ""
	@echo "üì¶ Taille de l'image:"
	@docker image inspect $(IMAGE_NAME):$(VERSION) --format='{{.Size}}' | numfmt --to=iec-i --suffix=B
	@echo ""
	@echo "üè∑Ô∏è  Layers:"
	@docker history $(IMAGE_NAME):$(VERSION) --no-trunc

# Test de s√©curit√© avec Trivy
security-scan: build
	@echo "üîí Scan de s√©curit√© avec Trivy..."
	-docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		aquasec/trivy image $(IMAGE_NAME):$(VERSION)

# Benchmark de performance
benchmark: build
	@echo "‚ö° Benchmark de performance..."
	@mkdir -p $(OUTPUT_DIR)
	time docker run --rm \
		-v $(PWD):/workspace:ro \
		-v $(OUTPUT_DIR):/output \
		$(IMAGE_NAME):$(VERSION) scan /workspace --format json --output /output/benchmark.json

# Aide sp√©cifique √† Docker Compose
compose-help:
	@echo "üê≥ Commandes Docker Compose disponibles:"
	@echo "  docker-compose up demo      - D√©monstration"
	@echo "  docker-compose up dev       - Mode d√©veloppement"
	@echo "  docker-compose up test      - Tests"
	@echo "  docker-compose up docs      - Documentation"
	@echo "  docker-compose down         - Arr√™t des services"